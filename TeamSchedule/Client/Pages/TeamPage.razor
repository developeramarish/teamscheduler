@page "/teams/{teamId:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject ApiClient apiClient
@inject StateContainer stateContainer;

<PageTitle>Team '@(this.team.Name ?? string.Empty)'</PageTitle>

@if (this.stateContainer.IsInProgress)
{
    <div class="py-2 px-2">
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    </div>
}

<ModalDialog Title="@this.dialogHeader" OnConfirmCallback="OnConfirmAsync">
    <div>
        <label for="newTeamUserNameInput" class="form-label">User Name</label>
        <input class="form-control" type="text" id="newTeamUserNameInput" placeholder="Name" @bind="this.newTeamUserName">
    </div>
</ModalDialog>

@if (this.team != null)
{
    <div class="py-2 px-2">
        <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#modalDialog" @onclick="StartAddUser">Add User</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Email</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in this.team.Users ?? Array.Empty<TeamUser>())
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td><button class="btn btn-outline-primary" type="button" @onclick="(e) => { }">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public Guid TeamId { get; set; }

    private Team team { get; set; }

    private string newTeamUserName;

    private string dialogHeader;

    private Func<Task> confirmActionAsync;

    protected override async Task OnInitializedAsync()
    {
        this.team = this.stateContainer.Teams.FirstOrDefault(t => t.Id.Equals(TeamId));
        if (this.team is null)
        {
            await this.stateContainer.TryFetchTeamsAsync(this.apiClient);
            this.team = this.stateContainer.Teams.FirstOrDefault(t => t.Id.Equals(TeamId));
        }
        await this.stateContainer.TryFetchUsersAsync(this.apiClient);
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        await this.confirmActionAsync();
    }

    public void StartAddUser()
    {
        this.newTeamUserName = string.Empty;
        this.dialogHeader = "Add New Member";
        this.confirmActionAsync = this.AddUser;
    }

    public async Task AddUser()
    {
        Console.WriteLine($"Add User '{this.newTeamUserName}'");
        // TODO ...
    }
}
